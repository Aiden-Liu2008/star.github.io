<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Star Field</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
    </style>
</head>
<body>

<canvas id="starField"></canvas>

<script>
    document.addEventListener('DOMContentLoaded', init);

    function init() {
        const canvas = document.getElementById('starField');
        const gl = canvas.getContext('webgl');

        if (!gl) {
            console.error('Unable to initialize WebGL. Your browser may not support it.');
            return;
        }

        const vertexShaderSource = `
            attribute vec4 a_position;
            attribute float a_size;
            uniform mat4 u_matrix;
            varying float v_alpha;
            
            void main() {
                gl_Position = u_matrix * a_position;
                gl_PointSize = a_size;
                v_alpha = 1.0 - (length(gl_Position) / 2.0);
            }
        `;

        const fragmentShaderSource = `
            precision mediump float;
            varying float v_alpha;
            
            void main() {
                gl_FragColor = vec4(1.0, 1.0, 1.0, v_alpha);
            }
        `;

        const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
        const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

        const program = createProgram(gl, vertexShader, fragmentShader);

        const positionAttributeLocation = gl.getAttribLocation(program, 'a_position');
        const sizeAttributeLocation = gl.getAttribLocation(program, 'a_size');
        const matrixLocation = gl.getUniformLocation(program, 'u_matrix');

        const vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);

        const vertices = generateRandomStars(5000);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

        gl.clearColor(0, 0, 0, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);
        gl.useProgram(program);

        gl.enableVertexAttribArray(positionAttributeLocation);
        gl.enableVertexAttribArray(sizeAttributeLocation);

        gl.vertexAttribPointer(positionAttributeLocation, 3, gl.FLOAT, false, 16, 0);
        gl.vertexAttribPointer(sizeAttributeLocation, 1, gl.FLOAT, false, 16, 12);

        gl.uniformMatrix4fv(matrixLocation, false, new Float32Array(getProjectionMatrix()));

        gl.drawArrays(gl.POINTS, 0, vertices.length / 4);

        function createShader(gl, type, source) {
            const shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                console.error(gl.getShaderInfoLog(shader));
                gl.deleteShader(shader);
                return null;
            }

            return shader;
        }

        function createProgram(gl, vertexShader, fragmentShader) {
            const program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error(gl.getProgramInfoLog(program));
                gl.deleteProgram(program);
                return null;
            }

            return program;
        }

        function generateRandomStars(count) {
            const stars = [];
            for (let i = 0; i < count; i++) {
                stars.push(Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2 - 1, Math.random() * 2);
            }
            return stars;
        }

        function getProjectionMatrix() {
            const fieldOfView = 30 * Math.PI / 180;
            const aspect = canvas.clientWidth / canvas.clientHeight;
            const zNear = 0.1;
            const zFar = 1000;
            const projectionMatrix = mat4.create();

            mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);

            return projectionMatrix;
        }
    }
</script>

</body>
</html>
